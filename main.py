import logging
import requests
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
import random

# –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update, context):
    user_name = update.message.from_user.first_name
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±–æ—Ç –æ—Ç DDCompany. –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å!",
        reply_markup=get_main_keyboard_markup()
    )
# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help(update, context):
    help_message = (
        "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö\n"
        "/gif - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –≥–∏—Ñ–∫—É\n"
        "/calc N - –ü–æ—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É –æ—Ç 1 –¥–æ N\n"
        "/calc_expr –≤—ã—Ä–∞–∂–µ–Ω–∏–µ - –†–µ—à–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"
    )
    await update.message.reply_text(help_message, reply_markup=get_main_keyboard_markup())

# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /gif
async def send_gif(update, context):
    gif_url = get_random_gif()
    if gif_url:
        await context.bot.send_document(chat_id=update.effective_chat.id, document=gif_url)
    else:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–∏—Ñ–∫—É –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –≥–∏—Ñ–∫–∏ –∏–∑ Giphy
def get_random_gif():
    giphy_api_key = "GNa1pdAQue70ircdkDwDTzZhQbz3o4pa"
    url = f"https://api.giphy.com/v1/gifs/random?api_key={giphy_api_key}&tag=&rating=g"

    response = requests.get(url)
    gif_data = response.json()
    logger.info("Giphy API response: %s", gif_data)

    if "data" in gif_data and "image_url" in gif_data["data"]:
        gif_url = gif_data["data"]["image_url"]
        return gif_url
    else:
        logger.error("Failed to get gif URL from Giphy API response")
        return None

# –°–ø–∏—Å–æ–∫ —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —Ñ—Ä–∞–∑
random_responses = [
    "–ü—Ä–∏–≤–µ—Ç!",
    "–ö–∞–∫ –¥–µ–ª–∞?",
    "–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è!",
    "–î–∞–≤–∞–π—Ç–µ –ø–æ–æ–±—â–∞–µ–º—Å—è!",
    "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
    "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º!",
    "–°–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
]

# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ "–º–Ω–µ —Å–∫—É—á–Ω–æ"
async def reply_with_random_response(update, context):
    message_text = update.message.text.lower()
    if "–º–Ω–µ —Å–∫—É—á–Ω–æ" not in message_text:
        random_response = random.choice(random_responses)
        await update.message.reply_text(random_response, reply_markup=get_main_keyboard_markup())



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ç–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ /gif –∏ /help
def get_main_keyboard_markup():
    keyboard = [
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –≥–∏—Ñ–∫—É", callback_data='gif')],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data='help')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
async def button_click(update, context):
    query = update.callback_query
    if query.data == 'gif':
        await send_gif(update, context)
    elif query.data == 'help':
        await help(update, context)

async def count_to(update, context):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —á–∏—Å–ª–æ)
        count_to_number = int(context.args[0])
        if count_to_number > 0:
            # –°—á–∏—Ç–∞–µ–º –æ—Ç 1 –¥–æ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            count_result = '\n'.join(str(i) for i in range(1, count_to_number + 1))
            await update.message.reply_text(f"–û—Ç 1 –¥–æ {count_to_number}:\n{count_result}")
        else:
            await update.message.reply_text("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.")
    except (IndexError, ValueError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /count.")

async def calculator(update, context):
    try:
        number = int(context.args[0])
        result = sum(range(1, number + 1))
        await update.message.reply_text(f"–°—É–º–º–∞ –æ—Ç 1 –¥–æ {number} —Ä–∞–≤–Ω–∞ {result}")
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /calc N, –≥–¥–µ N - —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")

# –§—É–Ω–∫—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
async def calculate_expression(update, context):
    try:
        expr = ' '.join(context.args)
        result = eval(expr)
        await update.message.reply_text(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏—è '{expr}' —Ä–∞–≤–µ–Ω {result}")
    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.")

async def handle_message(update, context):
    message_text = update.message.text.lower()
    if "–º–Ω–µ —Å–∫—É—á–Ω–æ" in message_text:
        await update.message.reply_text("–Ø –∑–Ω–∞—é, —á—Ç–æ –¥–µ–ª–∞—Ç—å üòâ", reply_markup=get_youtube_button())
    else:
        random_response = random.choice(random_responses)
        await update.message.reply_text(random_response, reply_markup=get_main_keyboard_markup())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ YouTube
def get_youtube_button():
    keyboard = [
        [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ YouTube", url="https://www.youtube.com/")]
    ]
    return InlineKeyboardMarkup(keyboard)

def main():
    # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç Application —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞
    application = Application.builder().token("5620066176:AAF90Pk79HdfdiJ1p91F5MyW_ecct7qxP70").build()

    # –°–æ–∑–¥–∞—ë–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    start_handler = CommandHandler("start", start)

    # –°–æ–∑–¥–∞—ë–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    help_handler = CommandHandler("help", help)

    # –°–æ–∑–¥–∞—ë–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /gif
    gif_handler = CommandHandler("gif", send_gif)

    # –°–æ–∑–¥–∞—ë–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_handler = MessageHandler(filters.Text() & ~filters.Command(), reply_with_random_response)

    # –°–æ–∑–¥–∞—ë–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É /gif
    gif_button_handler = CallbackQueryHandler(button_click, pattern="^gif$")

    # –°–æ–∑–¥–∞—ë–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É /help
    help_button_handler = CallbackQueryHandler(button_click, pattern="^help$")

    count_handler = CommandHandler("count", count_to)

    calc_handler = CommandHandler("calc", calculator)

    # –°–æ–∑–¥–∞—ë–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /calc_expr
    calc_expr_handler = CommandHandler("calc_expr", calculate_expression)
    message_handler = MessageHandler(filters.Text() & ~filters.Command(), handle_message)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    application.add_handler(start_handler)
    application.add_handler(help_handler)
    application.add_handler(gif_handler)
    application.add_handler(message_handler)
    application.add_handler(gif_button_handler)
    application.add_handler(help_button_handler)
    application.add_handler(count_handler)
    application.add_handler(calc_handler)
    application.add_handler(calc_expr_handler)

    application.run_polling()

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é main() –≤ —Å–ª—É—á–∞–µ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞.
if __name__ == '__main__':
    main()
